/******************************************************************************/
/***         Generated by IBExpert 2020.4.21.2 22/10/2021 06:33:18          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

SET CLIENTLIB 'fbclient.dll';

CREATE DATABASE '127.0.0.1/3051:D:\Downloads\Daniel\TreinamentoEstagiarios-estoque\treinamentoestagiarios\Banco\CONTROLEESTOQUE.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET NONE COLLATION NONE;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE TBLCLI (
    CODCLI       INTEGER NOT NULL,
    NOMECLI      VARCHAR(100),
    CPFCLI       VARCHAR(11),
    DTNASCLI     DATE,
    CELULARCLI   VARCHAR(11),
    ENDERECOCLI  VARCHAR(100),
    EMAILCLI     VARCHAR(80)
);

CREATE TABLE TBLDEV (
    CODDEV  INTEGER NOT NULL,
    CODLOC  INTEGER,
    CODFUN  INTEGER,
    DTDEV   DATE
);

CREATE TABLE TBLFIL (
    CODFIL        INTEGER NOT NULL,
    CODGEN        INTEGER,
    NOMEFIL       VARCHAR(100),
    DTLANCAMENTO  DATE,
    IMAGEM        BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    QTDTOT        INTEGER,
    QTDDISP       INTEGER
);

CREATE TABLE TBLFUN (
    CODFUN       INTEGER NOT NULL,
    NOMEFUN      VARCHAR(100),
    CARGOFUN     VARCHAR(80),
    CELULARFUN   VARCHAR(11),
    EMAILFUN     VARCHAR(100),
    SENLOGFUN    VARCHAR(20),
    CPFFUN       VARCHAR(11),
    ENDERECOFUN  VARCHAR(80),
    DTNASFUN     DATE
);

CREATE TABLE TBLGEN (
    CODGEN   INTEGER NOT NULL,
    DESCGEN  VARCHAR(50)
);

CREATE TABLE TBLITEMLOC (
    CODLOC  INTEGER NOT NULL,
    CODFIL  INTEGER NOT NULL,
    QTDLOC  INTEGER
);

CREATE TABLE TBLITEMMOV (
    CODMOV      INTEGER NOT NULL,
    CODFIL      INTEGER NOT NULL,
    QTDITEMMOV  INTEGER
);

CREATE TABLE TBLLOC (
    CODLOC  INTEGER NOT NULL,
    CODCLI  INTEGER,
    CODFUN  INTEGER,
    DTLOC   DATE
);

CREATE TABLE TBLMOV (
    CODMOV  INTEGER NOT NULL,
    DTMOV   DATE,
    QTDMOV  INTEGER
);



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE TBLCLI ADD CONSTRAINT PK_TBLCLI PRIMARY KEY (CODCLI);
ALTER TABLE TBLDEV ADD CONSTRAINT PK_TBLDEV PRIMARY KEY (CODDEV);
ALTER TABLE TBLFIL ADD CONSTRAINT PK_TBLFIL PRIMARY KEY (CODFIL);
ALTER TABLE TBLFUN ADD CONSTRAINT PK_TBLFUN PRIMARY KEY (CODFUN);
ALTER TABLE TBLGEN ADD CONSTRAINT PK_TBLGEN PRIMARY KEY (CODGEN);
ALTER TABLE TBLITEMLOC ADD CONSTRAINT PK_TBLITEMLOC PRIMARY KEY (CODLOC, CODFIL);
ALTER TABLE TBLITEMMOV ADD CONSTRAINT PK_TBLITEMMOV PRIMARY KEY (CODMOV, CODFIL);
ALTER TABLE TBLLOC ADD CONSTRAINT PK_TBLLOC PRIMARY KEY (CODLOC);
ALTER TABLE TBLMOV ADD CONSTRAINT PK_TBLMOV PRIMARY KEY (CODMOV);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE TBLDEV ADD CONSTRAINT FK_TBLDEV_TBLFUN FOREIGN KEY (CODFUN) REFERENCES TBLFUN (CODFUN);
ALTER TABLE TBLDEV ADD CONSTRAINT FK_TBLDEV_TBLLOC FOREIGN KEY (CODLOC) REFERENCES TBLLOC (CODLOC);
ALTER TABLE TBLFIL ADD CONSTRAINT FK_TBLFIL_TBLGEN FOREIGN KEY (CODGEN) REFERENCES TBLGEN (CODGEN);
ALTER TABLE TBLITEMLOC ADD CONSTRAINT FK_TBLITEMLOC_TBLFIL FOREIGN KEY (CODFIL) REFERENCES TBLFIL (CODFIL);
ALTER TABLE TBLITEMLOC ADD CONSTRAINT FK_TBLITEMLOC_TBLLOC FOREIGN KEY (CODLOC) REFERENCES TBLLOC (CODLOC);
ALTER TABLE TBLITEMMOV ADD CONSTRAINT FK_TBLITEMMOV_TBLFIL FOREIGN KEY (CODFIL) REFERENCES TBLFIL (CODFIL);
ALTER TABLE TBLITEMMOV ADD CONSTRAINT FK_TBLITEMMOV_TBLMOV FOREIGN KEY (CODMOV) REFERENCES TBLMOV (CODMOV);
ALTER TABLE TBLLOC ADD CONSTRAINT FK_TBLLOC_TBLCLI FOREIGN KEY (CODCLI) REFERENCES TBLCLI (CODCLI);
ALTER TABLE TBLLOC ADD CONSTRAINT FK_TBLLOC_TBLFUN FOREIGN KEY (CODFUN) REFERENCES TBLFUN (CODFUN);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: TRG_TBLCLI */
CREATE TRIGGER TRG_TBLCLI FOR TBLCLI
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODCLI, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODCLI) + 1 FROM TBLCLI E

    INTO NEW.CODCLI;

    IF (NEW.CODCLI IS NULL) THEN
     NEW.CODCLI = 1;
   END
END
^

/* Trigger: TRG_TBLDEV */
CREATE TRIGGER TRG_TBLDEV FOR TBLDEV
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODDEV, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODDEV) + 1 FROM TBLDEV E

    INTO NEW.CODDEV;

    IF (NEW.CODDEV IS NULL) THEN
     NEW.CODDEV = 1;
   END
END
^

/* Trigger: TRG_TBLFIL */
CREATE TRIGGER TRG_TBLFIL FOR TBLFIL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODFIL, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODFIL) + 1 FROM TBLFIL E

    INTO NEW.CODFIL;

    IF (NEW.CODFIL IS NULL) THEN
     NEW.CODFIL = 1;
   END
END
^

/* Trigger: TRG_TBLFUN */
CREATE TRIGGER TRG_TBLFUN FOR TBLFUN
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODFUN, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODFUN) + 1 FROM TBLFUN E

    INTO NEW.CODFUN;

    IF (NEW.CODFUN IS NULL) THEN
     NEW.CODFUN = 1;
   END
END
^

/* Trigger: TRG_TBLGEN */
CREATE TRIGGER TRG_TBLGEN FOR TBLGEN
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODGEN, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODGEN) + 1 FROM TBLGEN E

    INTO NEW.CODGEN;

    IF (NEW.CODGEN IS NULL) THEN
     NEW.CODGEN = 1;
   END
END
^

/* Trigger: TRG_TBLLOC */
CREATE TRIGGER TRG_TBLLOC FOR TBLLOC
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODLOC, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODLOC) + 1 FROM TBLLOC E

    INTO NEW.CODLOC;

    IF (NEW.CODLOC IS NULL) THEN
     NEW.CODLOC = 1;
   END
END
^

/* Trigger: TRG_TBLMOV */
CREATE TRIGGER TRG_TBLMOV FOR TBLMOV
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (COALESCE(NEW.CODMOV, 0) = 0) THEN
   BEGIN
    SELECT MAX(CODMOV) + 1 FROM TBLMOV E

    INTO NEW.CODMOV;

    IF (NEW.CODMOV IS NULL) THEN
     NEW.CODMOV = 1;
   END
END
^
SET TERM ; ^

